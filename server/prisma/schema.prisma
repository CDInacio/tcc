generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  fullname      String
  email         String         @unique
  password      String
  role          Role           @default(User)
  createdAt     DateTime       @default(now())
  forms         Form[]
  bookings      Booking[]
  notifications Notification[]
}

model Form {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  form_name        String
  form_description String
  user             Users       @relation(fields: [user_id], references: [id])
  user_id          String      @db.ObjectId
  form_fields      FormField[]
  isActive         Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model FormField {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  field_name     String
  field_type     String
  field_required Boolean
  Form           Form?   @relation(fields: [formId], references: [id])
  formId         String? @db.ObjectId
}

model Booking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  formId    String   @db.ObjectId
  user      Users?   @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  data      Json
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

enum Role {
  User
  ADMIN
}

model Schedules {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  date String?
  slot Slot[]  @relation("SchedulesSlot")
}

model Slot {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  time        String     @unique
  status      String     @default("livre")
  description String?
  scheduleId  String?    @db.ObjectId
  Schedules   Schedules? @relation(fields: [scheduleId], references: [id], name: "SchedulesSlot")
}

model Notification {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  message       String
  description   String
  recipientId   String?  @db.ObjectId
  recipientRole Role
  read          Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user Users? @relation(fields: [recipientId], references: [id])
}
